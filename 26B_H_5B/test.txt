
      ~~~~~~~~ test.c ~~~~~~~~

   1| /*
   2|      CIS26B
   3|      Complex Structures and Functions
   4|         - define and initialize an array of FRIEND structures
   5|         - use structures as reference parameters (pointers)
   6| */
   7| #include <stdio.h>
   8| #include <string.h>
   9| 
  10| typedef struct{
  11|     char *name;
  12|     char  phone[11];
  13|     int   age;
  14| } FRIEND;
  15| 
  16| // Function Declarations
  17| void exchange( FRIEND *one, FRIEND *two );
  18| void print_a_friend( const FRIEND *a_friend );
  19| 
  20| int main( void )
  21| {
  22|     int i;
  23| 
  24|     FRIEND a_friend = { "John", "4081112345", 25 };
  25|     FRIEND friend_2;
  26|     FRIEND friends[10] = 
  27|     {
  28|         { "John", "4081112345", 25 },
  29|         { "Mary", "4089992222", 21 },
  30|         { "Mira", "4086668888", 22 }
  31|     };
  32|     
  33|     friend_2.name = "Mary";
  34|     strcpy(friend_2.phone, "4089992222");
  35|     friend_2.age = 21;
  36| 
  37|     printf( "%s %s %d\n", a_friend.name, a_friend.phone, a_friend.age );
  38|     printf( "%s %s %d\n", friend_2.name, friend_2.phone, friend_2.age );
  39|     printf( "\n" );
  40| 
  41|     for( i = 0; i < 3; i++ )
  42|         print_a_friend( &friends[i] );
  43|     printf( "\n" );
  44| 
  45|     exchange( &friends[0], &friends[2] );
  46| 
  47|     for( i = 0; i < 3; i++ )
  48|         print_a_friend( &friends[i] );
  49|     printf( "\n" );
  50| 
  51| 	return 0;
  52| }
  53| 
  54| /*
  55|  This function swaps
  56|  two FRIEND structures
  57|  */
  58| void exchange( FRIEND *one, FRIEND *two )
  59| {
  60|     FRIEND _temp; // needed for swapping
  61| 
  62|     _temp = *one;
  63|     *one = *two;
  64|     *two = _temp;
  65| }
  66| 
  67| /*
  68|  This function receives a pointer to a FRIEND structure
  69|  and displays its fields on one line.
  70|  */
  71| void print_a_friend( const FRIEND *a_friend )
  72| {
  73|     printf( "%s %s %d\n", a_friend->name, a_friend->phone, a_friend->age );
  74| }
  75| 
  76| /*
  77|  ************ OUTPUT *****************
  78| 
  79|  John 4081112345 25
  80|  Mary 4089992222 21
  81|  
  82|  John 4081112345 25
  83|  Mary 4089992222 21
  84|  Mira 4086668888 22
  85|  
  86|  Mira 4086668888 22
  87|  Mary 4089992222 21
  88|  John 4081112345 25
  89| 
  90| */


List of Identifiers in test.c. Created on Wed Mar 22 23:27:35 2023 PDT

  FRIEND            14   17   18   24   25   26   58   60   71
  _temp             60   62   64
  a_friend          18   24   37   71   73
  age               13   35   37   38   73
  char              11   12
  const             18   71
  exchange          17   45   58
  for               41   47
  friend_2          25   33   34   35   38
  friends           26
  i                 22   41   42   47   48
  int               13   20   22
  main              20
  name              11   33   37   38   73
  one               17   58   62   63
  phone             12   34   37   38   73
  print_a_friend    18   42   48   71
  printf            37   38   39   43   49   73
  return            51
  strcpy            34
  struct            10
  two               17   58   63   64
  typedef           10
  void              17   18   20   58   71

